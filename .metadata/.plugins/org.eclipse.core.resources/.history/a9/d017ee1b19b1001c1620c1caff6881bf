package robot.apocalypse.survivor.Services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import robot.apocalypse.survivor.Entities.Resources;
import robot.apocalypse.survivor.Entities.Survivor;
import robot.apocalypse.survivor.Pojo.LocationPojo;
import robot.apocalypse.survivor.Pojo.SurvivorPojo;
import robot.apocalypse.survivor.Repositories.SurvivorRepo;


@Service
public class SurvivorService {
	
	@Autowired
	private SurvivorRepo repo;
	@Autowired
	private ResourceService resourceService;
	@Autowired
	private RestTemplate restTemplate;
	@Value("${location.url}")
	private String url;
	
	
	

	public Survivor saveSurvivor(Survivor survivor) {
		return repo.save(survivor);
	}
	
	
	
	public List<Survivor> getAllSurvivors(){
		List<Survivor>  survivorList = new ArrayList<>();
		repo.findAll().stream().parallel().forEach(survivorList::add);
		return survivorList;
	}
	
	public LocationPojo getLocation(int id) {
		return  restTemplate.getForObject(url+id, LocationPojo.class);
	}
	
	
	public LocationPojo failedTogetLocation(Exception e) {
		return new LocationPojo();
	}
	
//	@CircuitBreaker(name="locationService", fallbackMethod = "failedTogetLocation")
	public SurvivorPojo getSurvivorById(int id) {
		
		Resources resource = new Resources();
		SurvivorPojo survivorPojo = new SurvivorPojo();
		LocationPojo locationPojo = new LocationPojo();
		
		Optional<LocationPojo>  location = Optional.of(getLocation(id));
		Optional<Survivor>   survivor = Optional.of(repo.findByIdentificationNumber(id));
		
		if(survivor.isPresent() && location.isPresent()) {
			resource = resourceService.getResourceByIdentificationNumber(survivor.get().getIdentificationNumber());
			survivorPojo.setResource(resource);
			survivorPojo.setSurvivor(survivor.get());
			survivorPojo.setLocation(location.get());
		}
		
		
		return survivorPojo;
	}

}
